version: 2.1
orbs:
  kubernetes: circleci/kubernetes@1.0.0
  helm: circleci/helm@2.0.1

parameters:
  image-tag:
    type: string
    description: Tag of the image to be built
    default: "v0.0.0"

  project-name:
    type: string 
    description: Name of the app and namespace, example -> test-app
    default: cicd-integration-test

  project-helm-values:
    type: string 
    description: Index of values in the helm chart file, example -> testApp
    default: cicdIntegrationTest

  hors-prod-devops-path:
    type: string
    description: Path to the values for hors-prod cluster
    default: ./devops/hors-prod.values.yaml

  prod-devops-path: 
    type: string 
    description: Path to the values for prod cluster
    default: ./devops/prod.values.yaml


jobs:

  verify-tag: 
    docker:
      - image: cimg/base:stable 
    steps:
      - checkout
      - run: echo "export TAG=$(git log -1 --pretty="format:%s" | sed 's/.*\[\([^]]*\)\].*/\1/g')">> $BASH_ENV
      - setup_remote_docker:
          version: 20.10.12
          docker_layer_caching: true
      - run: docker login rg.fr-par.scw.cloud/<<pipeline.parameters.project-name>> -u nologin -p $SCW_SECRET_KEY
      - run: docker manifest inspect rg.fr-par.scw.cloud/cicd-integration-test/app:$TAG && exit 1 || echo 'TAG is available'
      - run: 
          when: on_fail 
          command: echo 'Tag is not available'

  
  build-push-docker-image: 
    machine:
      image: ubuntu-2204:2022.04.1
    resource_class: xlarge
    environment:
      TAG: << pipeline.parameters.image-tag >>
    steps:
      - checkout
      - run: echo "export TAG=$(git log -1 --pretty="format:%s" | sed 's/.*\[\([^]]*\)\].*/\1/g')">> $BASH_ENV
      - run: docker login rg.fr-par.scw.cloud/<<pipeline.parameters.project-name>> -u nologin -p $SCW_SECRET_KEY
      - run: docker build --tag rg.fr-par.scw.cloud/<<pipeline.parameters.project-name>>/app:$TAG app | while read line; do echo "$(date +%T) > $line"; done;
      - run: docker push rg.fr-par.scw.cloud/<<pipeline.parameters.project-name>>/app:$TAG
  
  deploy-staging:
    docker:
      - image: cimg/base:stable 
    environment:
      TAG: << pipeline.parameters.image-tag >>
    steps: 
      - checkout
      - run: echo "export TAG=$(git log -1 --pretty="format:%s" | sed 's/.*\[\([^]]*\)\].*/\1/g')">> $BASH_ENV
      - run: echo $TAG
      - kubernetes/install-kubeconfig:
          kubeconfig: KUBECONFIG_DATA
      - helm/install-helm-client
      - run: helm upgrade << pipeline.parameters.project-name >> ./devops -i -f << pipeline.parameters.hors-prod-devops-path >> -n << pipeline.parameters.project-name >> --create-namespace --set << pipeline.parameters.project-helm-values >>.image.tag=$TAG


  deploy-prod:
    docker:
      - image: cimg/base:stable 
    environment:
      TAG: << pipeline.parameters.image-tag >>
    steps: 
      - checkout
      - run: echo "export TAG=$(git log -1 --pretty="format:%s" | sed 's/.*\[\([^]]*\)\].*/\1/g')">> $BASH_ENV
      - run: echo $TAG
      - kubernetes/install-kubeconfig:
          kubeconfig: KUBECONFIG_DATA
      - helm/install-helm-client
      - run: helm upgrade << pipeline.parameters.project-name >> ./devops -i -f << pipeline.parameters.prod-devops-path >> -n << pipeline.parameters.project-name >> --create-namespace --set << pipeline.parameters.project-helm-values >>.image.tag=$TAG

workflows:
  version: 2

  build-push-deploy-staging:
    jobs:
      - verify-tag:
          filters: &filters-staging
            branches:
              only: staging
      - build-push-docker-image:
          requires:
            - verify-tag
          context: 
            - staging
          filters: 
            <<: *filters-staging
      - deploy-staging: 
          filters: 
            <<: *filters-staging
          requires: 
            - build-push-docker-image
          context: 
            - staging 

  build-push-deploy-production:
    jobs:
      - verify-tag:
          filters: &filters-production
            branches:
              only: master
      - build-push-docker-image:
          requires: 
            - verify-tag
          context: 
            - production
          filters: 
            <<: *filters-production
      - validate-prod-deploy: 
          requires: 
            - build-push-docker-image
          type: approval
      - deploy-prod: 
          requires: 
            - validate-prod-deploy
          context: 
            - production 
          filters: 
            <<: *filters-production

